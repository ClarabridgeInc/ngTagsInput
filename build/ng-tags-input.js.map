{"version":3,"file":null,"sources":["e:/source/tagsInput/src/constants.js","e:/source/tagsInput/src/tags-input.js","e:/source/tagsInput/src/tag-item.js","e:/source/tagsInput/src/auto-complete.js","e:/source/tagsInput/src/auto-complete-match.js","e:/source/tagsInput/src/autosize.js","e:/source/tagsInput/src/bind-attrs.js","e:/source/tagsInput/src/transclude-append.js","e:/source/tagsInput/src/configuration.js","e:/source/tagsInput/src/util.js","e:/source/tagsInput/build/tmp/compiled-templates.js","e:/source/tagsInput/src/init.js"],"sourcesContent":["export default {\r\n  KEYS: {\r\n    backspace: 8,\r\n    tab: 9,\r\n    enter: 13,\r\n    escape: 27,\r\n    space: 32,\r\n    up: 38,\r\n    down: 40,\r\n    left: 37,\r\n    right: 39,\r\n    delete: 46,\r\n    comma: 188\r\n  },\r\n  MAX_SAFE_INTEGER: 9007199254740991,\r\n  SUPPORTED_INPUT_TYPES: ['text', 'email', 'url']\r\n};\r\n\r\n","/**\r\n * @ngdoc directive\r\n * @name tagsInput\r\n * @module ngTagsInput\r\n *\r\n * @description\r\n * Renders an input box with tag editing support.\r\n *\r\n * @param {string} ngModel Assignable Angular expression to data-bind to.\r\n * @param {boolean=} [useStrings=false] Flag indicating that the model is an array of strings (EXPERIMENTAL).\r\n * @param {string=} [template=NA] URL or id of a custom template for rendering each tag.\r\n * @param {string=} [templateScope=NA] Scope to be passed to custom templates - of both tagsInput and\r\n *    autoComplete directives - as $scope.\r\n * @param {string=} [displayProperty=text] Property to be rendered as the tag label.\r\n * @param {string=} [keyProperty=text] Property to be used as a unique identifier for the tag.\r\n * @param {string=} [type=text] Type of the input element. Only 'text', 'email' and 'url' are supported values.\r\n * @param {string=} [text=NA] Assignable Angular expression for data-binding to the element's text.\r\n * @param {number=} tabindex Tab order of the control.\r\n * @param {string=} [placeholder=Add a tag] Placeholder text for the control.\r\n * @param {number=} [minLength=3] Minimum length for a new tag.\r\n * @param {number=} [maxLength=MAX_SAFE_INTEGER] Maximum length allowed for a new tag.\r\n * @param {number=} [minTags=0] Sets minTags validation error key if the number of tags added is less than minTags.\r\n * @param {number=} [maxTags=MAX_SAFE_INTEGER] Sets maxTags validation error key if the number of tags added is greater\r\n *    than maxTags.\r\n * @param {boolean=} [allowLeftoverText=false] Sets leftoverText validation error key if there is any leftover text in\r\n *    the input element when the directive loses focus.\r\n * @param {string=} [removeTagSymbol=Ã—] (Obsolete) Symbol character for the remove tag button.\r\n * @param {boolean=} [addOnEnter=true] Flag indicating that a new tag will be added on pressing the ENTER key.\r\n * @param {boolean=} [addOnSpace=false] Flag indicating that a new tag will be added on pressing the SPACE key.\r\n * @param {boolean=} [addOnComma=true] Flag indicating that a new tag will be added on pressing the COMMA key.\r\n * @param {boolean=} [addOnBlur=true] Flag indicating that a new tag will be added when the input field loses focus.\r\n * @param {boolean=} [addOnPaste=false] Flag indicating that the text pasted into the input field will be split into tags.\r\n * @param {string=} [pasteSplitPattern=,] Regular expression used to split the pasted text into tags.\r\n * @param {boolean=} [replaceSpacesWithDashes=true] Flag indicating that spaces will be replaced with dashes.\r\n * @param {string=} [allowedTagsPattern=.+] Regular expression that determines whether a new tag is valid.\r\n * @param {boolean=} [enableEditingLastTag=false] Flag indicating that the last tag will be moved back into the new tag\r\n *    input box instead of being removed when the backspace key is pressed and the input box is empty.\r\n * @param {boolean=} [addFromAutocompleteOnly=false] Flag indicating that only tags coming from the autocomplete list\r\n *    will be allowed. When this flag is true, addOnEnter, addOnComma, addOnSpace and addOnBlur values are ignored.\r\n * @param {boolean=} [spellcheck=true] Flag indicating whether the browser's spellcheck is enabled for the input field or not.\r\n * @param {expression=} [tagClass=NA] Expression to evaluate for each existing tag in order to get the CSS classes to be used.\r\n *    The expression is provided with the current tag as $tag, its index as $index and its state as $selected. The result\r\n *    of the evaluation must be one of the values supported by the ngClass directive (either a string, an array or an object).\r\n *    See https://docs.angularjs.org/api/ng/directive/ngClass for more information.\r\n * @param {expression=} [onTagAdding=NA] Expression to evaluate that will be invoked before adding a new tag. The new\r\n *    tag is available as $tag. This method must return either a boolean value or a promise. If either a false value or a rejected\r\n *    promise is returned, the tag will not be added.\r\n * @param {expression=} [onTagAdded=NA] Expression to evaluate upon adding a new tag. The new tag is available as $tag.\r\n * @param {expression=} [onInvalidTag=NA] Expression to evaluate when a tag is invalid. The invalid tag is available as $tag.\r\n * @param {expression=} [onTagRemoving=NA] Expression to evaluate that will be invoked before removing a tag. The tag\r\n *    is available as $tag. This method must return either a boolean value or a promise. If either a false value or a rejected\r\n *    promise is returned, the tag will not be removed.\r\n * @param {expression=} [onTagRemoved=NA] Expression to evaluate upon removing an existing tag. The removed tag is available as $tag.\r\n * @param {expression=} [onTagClicked=NA] Expression to evaluate upon clicking an existing tag. The clicked tag is available as $tag.\r\n */\r\nexport default function TagsInputDirective($timeout, $document, $window, $q, tagsInputConfig, tiUtil, tiConstants) {\r\n  'ngInject';\r\n\r\n  function TagList(options, events, onTagAdding, onTagRemoving) {\r\n    let self = {};\r\n\r\n    let getTagText = tag =>tiUtil.safeToString(tag[options.displayProperty]);\r\n    let setTagText = (tag, text) => {\r\n      tag[options.displayProperty] = text;\r\n    };\r\n\r\n    let canAddTag = tag => {\r\n      let tagText = getTagText(tag);\r\n      let valid = tagText &&\r\n                  tagText.length >= options.minLength &&\r\n                  tagText.length <= options.maxLength &&\r\n                  options.allowedTagsPattern.test(tagText) &&\r\n                  !tiUtil.findInObjectArray(self.items, tag, options.keyProperty || options.displayProperty);\r\n\r\n      return $q.when(valid && onTagAdding({ $tag: tag })).then(tiUtil.promisifyValue);\r\n    };\r\n\r\n    let canRemoveTag = tag => $q.when(onTagRemoving({ $tag: tag })).then(tiUtil.promisifyValue);\r\n\r\n    self.items = [];\r\n\r\n    self.addText = text => {\r\n      let tag = {};\r\n      setTagText(tag, text);\r\n      return self.add(tag);\r\n    };\r\n\r\n    self.add = tag => {\r\n      let tagText = getTagText(tag);\r\n\r\n      if (options.replaceSpacesWithDashes) {\r\n        tagText = tiUtil.replaceSpacesWithDashes(tagText);\r\n      }\r\n\r\n      setTagText(tag, tagText);\r\n\r\n      return canAddTag(tag)\r\n        .then(() =>{\r\n          self.items.push(tag);\r\n          events.trigger('tag-added', { $tag: tag });\r\n        })\r\n        .catch(() => {\r\n          if (tagText) {\r\n            events.trigger('invalid-tag', { $tag: tag });\r\n          }\r\n        });\r\n    };\r\n\r\n    self.remove = index => {\r\n      let tag = self.items[index];\r\n      return canRemoveTag(tag).then(() => {\r\n        self.items.splice(index, 1);\r\n        self.clearSelection();\r\n        events.trigger('tag-removed', { $tag: tag });\r\n        return tag;\r\n      });\r\n    };\r\n\r\n    self.select = index => {\r\n      if (index < 0) {\r\n        index = self.items.length - 1;\r\n      }\r\n      else if (index >= self.items.length) {\r\n        index = 0;\r\n      }\r\n\r\n      self.index = index;\r\n      self.selected = self.items[index];\r\n    };\r\n\r\n    self.selectPrior = () => {\r\n      self.select(--self.index);\r\n    };\r\n\r\n    self.selectNext = () => {\r\n      self.select(++self.index);\r\n    };\r\n\r\n    self.removeSelected = () => self.remove(self.index);\r\n\r\n    self.clearSelection = () => {\r\n      self.selected = null;\r\n      self.index = -1;\r\n    };\r\n\r\n    self.getItems = () => options.useStrings ? self.items.map(getTagText) : self.items;\r\n\r\n    self.clearSelection();\r\n\r\n    return self;\r\n  }\r\n\r\n  function validateType(type) {\r\n    return tiConstants.SUPPORTED_INPUT_TYPES.indexOf(type) !== -1;\r\n  }\r\n\r\n  return {\r\n    restrict: 'E',\r\n    require: 'ngModel',\r\n    scope: {\r\n      tags: '=ngModel',\r\n      text: '=?',\r\n      templateScope: '=?',\r\n      tagClass: '&',\r\n      onTagAdding: '&',\r\n      onTagAdded: '&',\r\n      onInvalidTag: '&',\r\n      onTagRemoving: '&',\r\n      onTagRemoved: '&',\r\n      onTagClicked: '&',\r\n    },\r\n    replace: false,\r\n    transclude: true,\r\n    templateUrl: 'ngTagsInput/tags-input.html',\r\n    controller($scope, $element, $attrs) {\r\n      'ngInject';\r\n\r\n      $scope.events = tiUtil.simplePubSub();\r\n\r\n      $scope.options = tagsInputConfig.load('tagsInput', $element, $attrs, $scope.events, {\r\n        template: [String, 'ngTagsInput/tag-item.html'],\r\n        type: [String, 'text', validateType],\r\n        placeholder: [String, 'Add a tag'],\r\n        tabindex: [Number, null],\r\n        removeTagSymbol: [String, String.fromCharCode(215)],\r\n        replaceSpacesWithDashes: [Boolean, true],\r\n        minLength: [Number, 3],\r\n        maxLength: [Number, tiConstants.MAX_SAFE_INTEGER],\r\n        addOnEnter: [Boolean, true],\r\n        addOnSpace: [Boolean, false],\r\n        addOnComma: [Boolean, true],\r\n        addOnBlur: [Boolean, true],\r\n        addOnPaste: [Boolean, false],\r\n        pasteSplitPattern: [RegExp, /,/],\r\n        allowedTagsPattern: [RegExp, /.+/],\r\n        enableEditingLastTag: [Boolean, false],\r\n        minTags: [Number, 0],\r\n        maxTags: [Number, tiConstants.MAX_SAFE_INTEGER],\r\n        displayProperty: [String, 'text'],\r\n        keyProperty: [String, ''],\r\n        allowLeftoverText: [Boolean, false],\r\n        addFromAutocompleteOnly: [Boolean, false],\r\n        spellcheck: [Boolean, true],\r\n        useStrings: [Boolean, false],\r\n        inputName: [String, 'tags']\r\n      });\r\n\r\n      $scope.tagList = new TagList($scope.options, $scope.events,\r\n        tiUtil.handleUndefinedResult($scope.onTagAdding, true),\r\n        tiUtil.handleUndefinedResult($scope.onTagRemoving, true));\r\n\r\n      this.registerAutocomplete = () => ({\r\n        addTag: function(tag) {\r\n          return $scope.tagList.add(tag);\r\n        },\r\n        getTags: function() {\r\n          return $scope.tagList.items;\r\n        },\r\n        getCurrentTagText: function() {\r\n          return $scope.newTag.text();\r\n        },\r\n        getOptions: function() {\r\n          return $scope.options;\r\n        },\r\n        getTemplateScope: function() {\r\n          return $scope.templateScope;\r\n        },\r\n        on: function(name, handler) {\r\n          $scope.events.on(name, handler, true);\r\n          return this;\r\n        }\r\n      });\r\n\r\n      this.registerTagItem = () => ({\r\n        getOptions: function () {\r\n          return $scope.options;\r\n        },\r\n        removeTag: function (index) {\r\n          if ($scope.disabled) {\r\n            return;\r\n          }\r\n          $scope.tagList.remove(index);\r\n        }\r\n      });\r\n    },\r\n    link(scope, element, attrs, ngModelCtrl) {\r\n      let hotkeys = [tiConstants.KEYS.enter, tiConstants.KEYS.comma, tiConstants.KEYS.space, tiConstants.KEYS.backspace,\r\n        tiConstants.KEYS.delete, tiConstants.KEYS.left, tiConstants.KEYS.right];\r\n      let tagList = scope.tagList;\r\n      let events = scope.events;\r\n      let options = scope.options;\r\n      let input = element.find('input');\r\n      let validationOptions = ['minTags', 'maxTags', 'allowLeftoverText'];\r\n\r\n      let setElementValidity = () => {\r\n        ngModelCtrl.$setValidity('maxTags', tagList.items.length <= options.maxTags);\r\n        ngModelCtrl.$setValidity('minTags', tagList.items.length >= options.minTags);\r\n        ngModelCtrl.$setValidity('leftoverText', scope.hasFocus || options.allowLeftoverText ? true : !scope.newTag.text());\r\n      };\r\n\r\n      let focusInput = () => {\r\n        $timeout(() => { input[0].focus(); });\r\n      };\r\n\r\n      ngModelCtrl.$isEmpty = value => !value || !value.length;\r\n\r\n      scope.newTag = {\r\n        text(value) {\r\n          if (angular.isDefined(value)) {\r\n            scope.text = value;\r\n            events.trigger('input-change', value);\r\n          }\r\n          else {\r\n            return scope.text || '';\r\n          }\r\n        },\r\n        invalid: null\r\n      };\r\n\r\n      scope.track = tag => tag[options.keyProperty || options.displayProperty];\r\n\r\n      scope.getTagClass = (tag, index) => {\r\n        let selected = tag === tagList.selected;\r\n        return [\r\n          scope.tagClass({$tag: tag, $index: index, $selected: selected}),\r\n                    { selected: selected }\r\n        ];\r\n      };\r\n\r\n      scope.$watch('tags', value => {\r\n        if (value) {\r\n          tagList.items = tiUtil.makeObjectArray(value, options.displayProperty);\r\n          if (options.useStrings) {\r\n            return;\r\n          }\r\n\r\n          scope.tags = tagList.items;\r\n        }\r\n        else {\r\n          tagList.items = [];\r\n        }\r\n      });\r\n\r\n      scope.$watch('tags.length', () => {\r\n        setElementValidity();\r\n\r\n        // ngModelController won't trigger validators when the model changes (because it's an array),\r\n        // so we need to do it ourselves. Unfortunately this won't trigger any registered formatter.\r\n        ngModelCtrl.$validate();\r\n      });\r\n\r\n      attrs.$observe('disabled', value => {\r\n        scope.disabled = value;\r\n      });\r\n\r\n      scope.eventHandlers = {\r\n        input: {\r\n          keydown($event) {\r\n            events.trigger('input-keydown', $event);\r\n          },\r\n          focus() {\r\n            if (scope.hasFocus) {\r\n              return;\r\n            }\r\n\r\n            scope.hasFocus = true;\r\n            events.trigger('input-focus');\r\n          },\r\n          blur() {\r\n            $timeout(() => {\r\n              let activeElement = $document.prop('activeElement');\r\n              let lostFocusToBrowserWindow = activeElement === input[0];\r\n              let lostFocusToChildElement = element[0].contains(activeElement);\r\n\r\n              if (lostFocusToBrowserWindow || !lostFocusToChildElement) {\r\n                scope.hasFocus = false;\r\n                events.trigger('input-blur');\r\n              }\r\n            });\r\n          },\r\n          paste($event) {\r\n            $event.getTextData = () => {\r\n              let clipboardData = $event.clipboardData || ($event.originalEvent && $event.originalEvent.clipboardData);\r\n              return clipboardData ? clipboardData.getData('text/plain') : $window.clipboardData.getData('Text');\r\n            };\r\n            events.trigger('input-paste', $event);\r\n          }\r\n        },\r\n        host: {\r\n          click() {\r\n            if (scope.disabled) {\r\n              return;\r\n            }\r\n            focusInput();\r\n          }\r\n        },\r\n        tag: {\r\n          click(tag) {\r\n            events.trigger('tag-clicked', { $tag: tag });\r\n          }\r\n        }\r\n      };\r\n\r\n      events\r\n        .on('tag-added', scope.onTagAdded)\r\n        .on('invalid-tag', scope.onInvalidTag)\r\n        .on('tag-removed', scope.onTagRemoved)\r\n        .on('tag-clicked', scope.onTagClicked)\r\n        .on('tag-added', () => {\r\n          scope.newTag.text('');\r\n        })\r\n        .on('tag-added tag-removed', () => {\r\n          scope.tags = tagList.getItems();\r\n          // Ideally we should be able call $setViewValue here and let it in turn call $setDirty and $validate\r\n          // automatically, but since the model is an array, $setViewValue does nothing and it's up to us to do it.\r\n          // Unfortunately this won't trigger any registered $parser and there's no safe way to do it.\r\n          ngModelCtrl.$setDirty();\r\n          focusInput();\r\n        })\r\n        .on('invalid-tag', () => {\r\n          scope.newTag.invalid = true;\r\n        })\r\n        .on('option-change', e => {\r\n          if (validationOptions.indexOf(e.name) !== -1) {\r\n            setElementValidity();\r\n          }\r\n        })\r\n        .on('input-change', () => {\r\n          tagList.clearSelection();\r\n          scope.newTag.invalid = null;\r\n        })\r\n        .on('input-focus', () => {\r\n          element.triggerHandler('focus');\r\n          ngModelCtrl.$setValidity('leftoverText', true);\r\n        })\r\n        .on('input-blur', () => {\r\n          if (options.addOnBlur && !options.addFromAutocompleteOnly) {\r\n            tagList.addText(scope.newTag.text());\r\n          }\r\n          element.triggerHandler('blur');\r\n          setElementValidity();\r\n        })\r\n        .on('input-keydown', event => {\r\n          let key = event.keyCode;\r\n\r\n          if (tiUtil.isModifierOn(event) || hotkeys.indexOf(key) === -1) {\r\n            return;\r\n          }\r\n\r\n          let addKeys = {\r\n            [tiConstants.KEYS.enter]: options.addOnEnter,\r\n            [tiConstants.KEYS.comma]: options.addOnComma,\r\n            [tiConstants.KEYS.space]: options.addOnSpace\r\n          };\r\n\r\n          let shouldAdd = !options.addFromAutocompleteOnly && addKeys[key];\r\n          let shouldRemove = (key === tiConstants.KEYS.backspace || key === tiConstants.KEYS.delete) && tagList.selected;\r\n          let shouldEditLastTag = key === tiConstants.KEYS.backspace && scope.newTag.text().length === 0 && options.enableEditingLastTag;\r\n          let shouldSelect = (key === tiConstants.KEYS.backspace || key === tiConstants.KEYS.left || key === tiConstants.KEYS.right) &&\r\n            scope.newTag.text().length === 0 && !options.enableEditingLastTag;\r\n\r\n          if (shouldAdd) {\r\n            tagList.addText(scope.newTag.text());\r\n          }\r\n          else if (shouldEditLastTag) {\r\n            tagList.selectPrior();\r\n            tagList.removeSelected().then(tag => {\r\n              if (tag) {\r\n                scope.newTag.text(tag[options.displayProperty]);\r\n              }\r\n            });\r\n          }\r\n          else if (shouldRemove) {\r\n            tagList.removeSelected();\r\n          }\r\n          else if (shouldSelect) {\r\n            if (key === tiConstants.KEYS.left || key === tiConstants.KEYS.backspace) {\r\n              tagList.selectPrior();\r\n            }\r\n            else if (key === tiConstants.KEYS.right) {\r\n              tagList.selectNext();\r\n            }\r\n          }\r\n\r\n          if (shouldAdd || shouldSelect || shouldRemove || shouldEditLastTag) {\r\n            event.preventDefault();\r\n          }\r\n        })\r\n        .on('input-paste', event => {\r\n          if (options.addOnPaste) {\r\n            let data = event.getTextData();\r\n            let tags = data.split(options.pasteSplitPattern);\r\n\r\n            if (tags.length > 1) {\r\n              tags.forEach(tag => {\r\n                tagList.addText(tag);\r\n              });\r\n              event.preventDefault();\r\n            }\r\n          }\r\n        });\r\n    }\r\n  };\r\n}\r\n","/**\r\n * @ngdoc directive\r\n * @name tiTagItem\r\n * @module ngTagsInput\r\n *\r\n * @description\r\n * Represents a tag item. Used internally by the tagsInput directive.\r\n */\r\nexport default function TagItemDirective(tiUtil) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'E',\r\n    require: '^tagsInput',\r\n    template: '<ng-include src=\"$$template\"></ng-include>',\r\n    scope: {\r\n      $scope: '=scope',\r\n      data: '='\r\n    },\r\n    link(scope, element, attrs, tagsInputCtrl) {\r\n      let tagsInput = tagsInputCtrl.registerTagItem();\r\n      let options = tagsInput.getOptions();\r\n\r\n      scope.$$template = options.template;\r\n      scope.$$removeTagSymbol = options.removeTagSymbol;\r\n\r\n      scope.$getDisplayText = () => tiUtil.safeToString(scope.data[options.displayProperty]);\r\n      scope.$removeTag = () => {\r\n        tagsInput.removeTag(scope.$index);\r\n      };\r\n\r\n      scope.$watch('$parent.$index', value => {\r\n        scope.$index = value;\r\n      });\r\n    }\r\n  };\r\n}\r\n","/**\r\n * @ngdoc directive\r\n * @name autoComplete\r\n * @module ngTagsInput\r\n *\r\n * @description\r\n * Provides autocomplete support for the tagsInput directive.\r\n *\r\n * @param {expression} source Expression to evaluate upon changing the input content. The input value is available as\r\n *    $query. The result of the expression must be a promise that eventually resolves to an array of strings.\r\n * @param {string=} [template=NA] URL or id of a custom template for rendering each element of the autocomplete list.\r\n * @param {string=} [displayProperty=tagsInput.displayText] Property to be rendered as the autocomplete label.\r\n * @param {number=} [debounceDelay=100] Amount of time, in milliseconds, to wait before evaluating the expression in\r\n *    the source option after the last keystroke.\r\n * @param {number=} [minLength=3] Minimum number of characters that must be entered before evaluating the expression\r\n *    in the source option.\r\n * @param {boolean=} [highlightMatchedText=true] Flag indicating that the matched text will be highlighted in the\r\n *    suggestions list.\r\n * @param {number=} [maxResultsToShow=10] Maximum number of results to be displayed at a time.\r\n * @param {boolean=} [loadOnDownArrow=false] Flag indicating that the source option will be evaluated when the down arrow\r\n *    key is pressed and the suggestion list is closed. The current input value is available as $query.\r\n * @param {boolean=} [loadOnEmpty=false] Flag indicating that the source option will be evaluated when the input content\r\n *    becomes empty. The $query variable will be passed to the expression as an empty string.\r\n * @param {boolean=} [loadOnFocus=false] Flag indicating that the source option will be evaluated when the input element\r\n *    gains focus. The current input value is available as $query.\r\n * @param {boolean=} [selectFirstMatch=true] Flag indicating that the first match will be automatically selected once\r\n *    the suggestion list is shown.\r\n * @param {expression=} [matchClass=NA] Expression to evaluate for each match in order to get the CSS classes to be used.\r\n *    The expression is provided with the current match as $match, its index as $index and its state as $selected. The result\r\n *    of the evaluation must be one of the values supported by the ngClass directive (either a string, an array or an object).\r\n *    See https://docs.angularjs.org/api/ng/directive/ngClass for more information.\r\n */\r\nexport default function AutocompleteDirective($document, $timeout, $sce, $q, tagsInputConfig, tiUtil, tiConstants) {\r\n  'ngInject';\r\n\r\n  function SuggestionList(loadFn, options, events) {\r\n    let self = {};\r\n    let lastPromise = null;\r\n\r\n    let getTagId = () => options.tagsInput.keyProperty || options.tagsInput.displayProperty;\r\n\r\n    let getDifference = function(array1, array2) {\r\n      return array1.filter(item => !tiUtil.findInObjectArray(array2, item, getTagId(), (a, b) =>{\r\n        if (options.tagsInput.replaceSpacesWithDashes) {\r\n          a = tiUtil.replaceSpacesWithDashes(a);\r\n          b = tiUtil.replaceSpacesWithDashes(b);\r\n        }\r\n        return tiUtil.defaultComparer(a, b);\r\n      }));\r\n    };\r\n\r\n    self.reset = () => {\r\n      lastPromise = null;\r\n\r\n      self.items = [];\r\n      self.visible = false;\r\n      self.index = -1;\r\n      self.selected = null;\r\n      self.query = null;\r\n    };\r\n\r\n    self.show = () => {\r\n      if (options.selectFirstMatch) {\r\n        self.select(0);\r\n      }\r\n      else {\r\n        self.selected = null;\r\n      }\r\n      self.visible = true;\r\n    };\r\n\r\n    self.load = tiUtil.debounce((query, tags) => {\r\n      self.query = query;\r\n\r\n      let promise = $q.when(loadFn({ $query: query }));\r\n      lastPromise = promise;\r\n\r\n      promise.then(items => {\r\n        if (promise !== lastPromise) {\r\n          return;\r\n        }\r\n\r\n        items = tiUtil.makeObjectArray(items.data || items, getTagId());\r\n        items = getDifference(items, tags);\r\n        self.items = items.slice(0, options.maxResultsToShow);\r\n\r\n        if (self.items.length > 0) {\r\n          self.show();\r\n        }\r\n        else {\r\n          self.reset();\r\n        }\r\n      });\r\n    }, options.debounceDelay);\r\n\r\n    self.selectNext = () => {\r\n      self.select(++self.index);\r\n    };\r\n\r\n    self.selectPrior = () => {\r\n      self.select(--self.index);\r\n    };\r\n\r\n    self.select = index => {\r\n      if (index < 0) {\r\n        index = self.items.length - 1;\r\n      }\r\n      else if (index >= self.items.length) {\r\n        index = 0;\r\n      }\r\n      self.index = index;\r\n      self.selected = self.items[index];\r\n      events.trigger('suggestion-selected', index);\r\n    };\r\n\r\n    self.reset();\r\n\r\n    return self;\r\n  }\r\n\r\n  function scrollToElement(root, index) {\r\n    let element = root.find('li').eq(index);\r\n    let parent = element.parent();\r\n    let elementTop = element.prop('offsetTop');\r\n    let elementHeight = element.prop('offsetHeight');\r\n    let parentHeight = parent.prop('clientHeight');\r\n    let parentScrollTop = parent.prop('scrollTop');\r\n\r\n    if (elementTop < parentScrollTop) {\r\n      parent.prop('scrollTop', elementTop);\r\n    }\r\n    else if (elementTop + elementHeight > parentHeight + parentScrollTop) {\r\n      parent.prop('scrollTop', elementTop + elementHeight - parentHeight);\r\n    }\r\n  }\r\n\r\n  return {\r\n    restrict: 'E',\r\n    require: '^tagsInput',\r\n    scope: {\r\n      source: '&',\r\n      matchClass: '&'\r\n    },\r\n    templateUrl: 'ngTagsInput/auto-complete.html',\r\n    controller($scope, $element, $attrs) {\r\n      'ngInject';\r\n\r\n      $scope.events = tiUtil.simplePubSub();\r\n\r\n      $scope.options = tagsInputConfig.load('autoComplete', $element, $attrs, $scope.events, {\r\n        template: [String, 'ngTagsInput/auto-complete-match.html'],\r\n        debounceDelay: [Number, 100],\r\n        minLength: [Number, 3],\r\n        highlightMatchedText: [Boolean, true],\r\n        maxResultsToShow: [Number, 10],\r\n        loadOnDownArrow: [Boolean, false],\r\n        loadOnEmpty: [Boolean, false],\r\n        loadOnFocus: [Boolean, false],\r\n        selectFirstMatch: [Boolean, true],\r\n        displayProperty: [String, '']\r\n      });\r\n\r\n      $scope.suggestionList = new SuggestionList($scope.source, $scope.options, $scope.events);\r\n\r\n      this.registerAutocompleteMatch = () => ({\r\n        getOptions: function () {\r\n          return $scope.options;\r\n        },\r\n        getQuery: function () {\r\n          return $scope.suggestionList.query;\r\n        }\r\n      });\r\n    },\r\n    link(scope, element, attrs, tagsInputCtrl) {\r\n      let hotkeys = [tiConstants.KEYS.enter, tiConstants.KEYS.tab, tiConstants.KEYS.escape, tiConstants.KEYS.up, tiConstants.KEYS.down];\r\n      let suggestionList = scope.suggestionList;\r\n      let tagsInput = tagsInputCtrl.registerAutocomplete();\r\n      let options = scope.options;\r\n      let events = scope.events;\r\n\r\n      options.tagsInput = tagsInput.getOptions();\r\n\r\n      let shouldLoadSuggestions = value => value && value.length >= options.minLength || !value && options.loadOnEmpty;\r\n\r\n      scope.templateScope = tagsInput.getTemplateScope();\r\n\r\n      scope.addSuggestionByIndex = index => {\r\n        suggestionList.select(index);\r\n        scope.addSuggestion();\r\n      };\r\n\r\n      scope.addSuggestion = () => {\r\n        let added = false;\r\n\r\n        if (suggestionList.selected) {\r\n          tagsInput.addTag(angular.copy(suggestionList.selected));\r\n          suggestionList.reset();\r\n          added = true;\r\n        }\r\n        return added;\r\n      };\r\n\r\n      scope.track = item => item[options.tagsInput.keyProperty || options.tagsInput.displayProperty];\r\n\r\n      scope.getSuggestionClass = (item, index) => {\r\n        let selected = item === suggestionList.selected;\r\n        return [\r\n          scope.matchClass({$match: item, $index: index, $selected: selected}),\r\n                    { selected: selected }\r\n        ];\r\n      };\r\n\r\n      tagsInput\r\n        .on('tag-added tag-removed invalid-tag input-blur', () => {\r\n          suggestionList.reset();\r\n        })\r\n        .on('input-change', value => {\r\n          if (shouldLoadSuggestions(value)) {\r\n            suggestionList.load(value, tagsInput.getTags());\r\n          }\r\n          else {\r\n            suggestionList.reset();\r\n          }\r\n        })\r\n        .on('input-focus', () => {\r\n          let value = tagsInput.getCurrentTagText();\r\n          if (options.loadOnFocus && shouldLoadSuggestions(value)) {\r\n            suggestionList.load(value, tagsInput.getTags());\r\n          }\r\n        })\r\n        .on('input-keydown', event => {\r\n          let key = event.keyCode;\r\n          let handled = false;\r\n\r\n          if (tiUtil.isModifierOn(event) || hotkeys.indexOf(key) === -1) {\r\n            return;\r\n          }\r\n\r\n          if (suggestionList.visible) {\r\n\r\n            if (key === tiConstants.KEYS.down) {\r\n              suggestionList.selectNext();\r\n              handled = true;\r\n            }\r\n            else if (key === tiConstants.KEYS.up) {\r\n              suggestionList.selectPrior();\r\n              handled = true;\r\n            }\r\n            else if (key === tiConstants.KEYS.escape) {\r\n              suggestionList.reset();\r\n              handled = true;\r\n            }\r\n            else if (key === tiConstants.KEYS.enter || key === tiConstants.KEYS.tab) {\r\n              handled = scope.addSuggestion();\r\n            }\r\n          }\r\n          else {\r\n            if (key === tiConstants.KEYS.down && scope.options.loadOnDownArrow) {\r\n              suggestionList.load(tagsInput.getCurrentTagText(), tagsInput.getTags());\r\n              handled = true;\r\n            }\r\n          }\r\n\r\n          if (handled) {\r\n            event.preventDefault();\r\n            event.stopImmediatePropagation();\r\n            return false;\r\n          }\r\n        });\r\n\r\n      events.on('suggestion-selected', index => {\r\n        scrollToElement(element, index);\r\n      });\r\n    }\r\n  };\r\n}\r\n","/**\r\n * @ngdoc directive\r\n * @name tiAutocompleteMatch\r\n * @module ngTagsInput\r\n *\r\n * @description\r\n * Represents an autocomplete match. Used internally by the autoComplete directive.\r\n */\r\nexport default function AutocompleteMatchDirective($sce, tiUtil) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'E',\r\n    require: '^autoComplete',\r\n    template: '<ng-include src=\"$$template\"></ng-include>',\r\n    scope: {\r\n      $scope: '=scope',\r\n      data: '='\r\n    },\r\n    link(scope, element, attrs, autoCompleteCtrl) {\r\n      let autoComplete = autoCompleteCtrl.registerAutocompleteMatch();\r\n      let options = autoComplete.getOptions();\r\n\r\n      scope.$$template = options.template;\r\n      scope.$index = scope.$parent.$index;\r\n\r\n      scope.$highlight = text => {\r\n        if (options.highlightMatchedText) {\r\n          text = tiUtil.safeHighlight(text, autoComplete.getQuery());\r\n        }\r\n        return $sce.trustAsHtml(text);\r\n      };\r\n\r\n      scope.$getDisplayText = () => tiUtil.safeToString(scope.data[options.displayProperty || options.tagsInput.displayProperty]);\r\n    }\r\n  };\r\n}\r\n","/**\r\n * @ngdoc directive\r\n * @name tiAutosize\r\n * @module ngTagsInput\r\n *\r\n * @description\r\n * Automatically sets the input's width so its content is always visible. Used internally by tagsInput directive.\r\n */\r\nexport default function AutosizeDirective(tagsInputConfig) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    require: 'ngModel',\r\n    link(scope, element, attrs, ctrl) {\r\n      let threshold = tagsInputConfig.getTextAutosizeThreshold();\r\n      let span = angular.element('<span class=\"input\"></span>');\r\n\r\n      span.css('display', 'none')\r\n          .css('visibility', 'hidden')\r\n          .css('width', 'auto')\r\n          .css('white-space', 'pre');\r\n\r\n      element.parent().append(span);\r\n\r\n      let resize = originalValue => {\r\n        let value = originalValue;\r\n        let width;\r\n\r\n        if (angular.isString(value) && value.length === 0) {\r\n          value = attrs.placeholder;\r\n        }\r\n\r\n        if (value) {\r\n          span.text(value);\r\n          span.css('display', '');\r\n          width = span.prop('offsetWidth');\r\n          span.css('display', 'none');\r\n        }\r\n\r\n        element.css('width', width ? width + threshold + 'px' : '');\r\n\r\n        return originalValue;\r\n      };\r\n\r\n      ctrl.$parsers.unshift(resize);\r\n      ctrl.$formatters.unshift(resize);\r\n\r\n      attrs.$observe('placeholder', value => {\r\n        if (!ctrl.$modelValue) {\r\n          resize(value);\r\n        }\r\n      });\r\n    }\r\n  };\r\n}","/**\r\n * @ngdoc directive\r\n * @name tiBindAttrs\r\n * @module ngTagsInput\r\n *\r\n * @description\r\n * Binds attributes to expressions. Used internally by tagsInput directive.\r\n */\r\nexport default function BindAttributesDirective() {\r\n  return (scope, element, attrs) => {\r\n    scope.$watch(attrs.tiBindAttrs, value => {\r\n      angular.forEach(value, (value, key) => {\r\n        attrs.$set(key, value);\r\n      });\r\n    }, true);\r\n  };\r\n}","/**\r\n * @ngdoc directive\r\n * @name tiTranscludeAppend\r\n * @module ngTagsInput\r\n *\r\n * @description\r\n * Re-creates the old behavior of ng-transclude. Used internally by tagsInput directive.\r\n */\r\nexport default function TranscludeAppendDirective() {\r\n  return (scope, element, attrs, ctrl, transcludeFn) => {\r\n    transcludeFn(clone => {\r\n      element.append(clone);\r\n    });\r\n  };\r\n}","/**\r\n * @ngdoc service\r\n * @name tagsInputConfig\r\n * @module ngTagsInput\r\n *\r\n * @description\r\n * Sets global configuration settings for both tagsInput and autoComplete directives. It's also used internally to parse and\r\n *  initialize options from HTML attributes.\r\n */\r\nexport default function TagsInputConfigurationProvider() {\r\n  'ngInject';\r\n\r\n  let globalDefaults = {};\r\n  let interpolationStatus = {};\r\n  let autosizeThreshold = 3;\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name tagsInputConfig#setDefaults\r\n   * @description Sets the default configuration option for a directive.\r\n   *\r\n   * @param {string} directive Name of the directive to be configured. Must be either 'tagsInput' or 'autoComplete'.\r\n   * @param {object} defaults Object containing options and their values.\r\n   *\r\n   * @returns {object} The service itself for chaining purposes.\r\n   */\r\n  this.setDefaults = (directive, defaults) => {\r\n    globalDefaults[directive] = defaults;\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name tagsInputConfig#setActiveInterpolation\r\n   * @description Sets active interpolation for a set of options.\r\n   *\r\n   * @param {string} directive Name of the directive to be configured. Must be either 'tagsInput' or 'autoComplete'.\r\n   * @param {object} options Object containing which options should have interpolation turned on at all times.\r\n   *\r\n   * @returns {object} The service itself for chaining purposes.\r\n   */\r\n  this.setActiveInterpolation = (directive, options) => {\r\n    interpolationStatus[directive] = options;\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name tagsInputConfig#setTextAutosizeThreshold\r\n   * @description Sets the threshold used by the tagsInput directive to re-size the inner input field element based on its contents.\r\n   *\r\n   * @param {number} threshold Threshold value, in pixels.\r\n   *\r\n   * @returns {object} The service itself for chaining purposes.\r\n   */\r\n  this.setTextAutosizeThreshold = threshold => {\r\n    autosizeThreshold = threshold;\r\n    return this;\r\n  };\r\n\r\n  this.$get = $interpolate => {\r\n    'ngInject';\r\n\r\n    let converters = {\r\n      [String]: value => value.toString(),\r\n      [Number]: value => parseInt(value, 10),\r\n      [Boolean]: value => value.toLowerCase() === 'true',\r\n      [RegExp]: value => new RegExp(value)\r\n    };\r\n\r\n    return {\r\n      load(directive, element, attrs, events, optionDefinitions) {\r\n        let defaultValidator = () => true;\r\n        let options = {};\r\n\r\n        angular.forEach(optionDefinitions, (value, key) => {\r\n          let type = value[0];\r\n          let localDefault = value[1];\r\n          let validator = value[2] || defaultValidator;\r\n          let converter = converters[type];\r\n\r\n          let getDefault = () => {\r\n            let globalValue = globalDefaults[directive] && globalDefaults[directive][key];\r\n            return angular.isDefined(globalValue) ? globalValue : localDefault;\r\n          };\r\n\r\n          let updateValue = value => {\r\n            options[key] = value && validator(value) ? converter(value) : getDefault();\r\n          };\r\n\r\n          if (interpolationStatus[directive] && interpolationStatus[directive][key]) {\r\n            attrs.$observe(key, value => {\r\n              updateValue(value);\r\n              events.trigger('option-change', { name: key, newValue: value });\r\n            });\r\n          }\r\n          else {\r\n            updateValue(attrs[key] && $interpolate(attrs[key])(element.scope()));\r\n          }\r\n        });\r\n\r\n        return options;\r\n      },\r\n      getTextAutosizeThreshold() {\r\n        return autosizeThreshold;\r\n      }\r\n    };\r\n  };\r\n}\r\n","/***\r\n * @ngdoc service\r\n * @name tiUtil\r\n * @module ngTagsInput\r\n *\r\n * @description\r\n * Helper methods used internally by the directive. Should not be called directly from user code.\r\n */\r\nexport default function UtilService($timeout, $q) {\r\n  'ngInject';\r\n\r\n  let self = {};\r\n\r\n  self.debounce = (fn, delay) => {\r\n    let timeoutId;\r\n    return function(...args) {\r\n      $timeout.cancel(timeoutId);\r\n      timeoutId = $timeout(function() { fn.apply(null, args); }, delay);\r\n    };\r\n  };\r\n\r\n  self.makeObjectArray = (array, key) => {\r\n    if (!angular.isArray(array) || array.length === 0 || angular.isObject(array[0])) {\r\n      return array;\r\n    }\r\n\r\n    return array.map(item => ({ [key]: item }));\r\n  };\r\n\r\n  self.findInObjectArray = (array, obj, key, comparer) => {\r\n    let item = null;\r\n    comparer = comparer || self.defaultComparer;\r\n\r\n    array.some(element => {\r\n      if (comparer(element[key], obj[key])) {\r\n        item = element;\r\n        return true;\r\n      }\r\n    });\r\n\r\n    return item;\r\n  };\r\n\r\n  self.defaultComparer = (a, b) => {\r\n    // I'm aware of the internationalization issues regarding toLowerCase()\r\n    // but I couldn't come up with a better solution right now\r\n    return self.safeToString(a).toLowerCase() === self.safeToString(b).toLowerCase();\r\n  };\r\n\r\n  self.safeHighlight = (str, value) => {\r\n    str = self.encodeHTML(str);\r\n    value = self.encodeHTML(value);\r\n\r\n    if (!value) {\r\n      return str;\r\n    }\r\n\r\n    let escapeRegexChars = str => str.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\r\n    let expression = new RegExp('&[^;]+;|' + escapeRegexChars(value), 'gi');\r\n\r\n    return str.replace(expression, match => match.toLowerCase() === value.toLowerCase() ? '<em>' + match + '</em>' : match);\r\n  };\r\n\r\n  self.safeToString = value => angular.isUndefined(value) || value === null ? '' : value.toString().trim();\r\n\r\n  self.encodeHTML = value => self.safeToString(value).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n\r\n  self.handleUndefinedResult = (fn, valueIfUndefined) => {\r\n    return function () {\r\n      let result = fn.apply(null, arguments);\r\n      return angular.isUndefined(result) ? valueIfUndefined : result;\r\n    };\r\n  };\r\n\r\n  self.replaceSpacesWithDashes = str => self.safeToString(str).replace(/\\s/g, '-');\r\n\r\n  self.isModifierOn = event => event.shiftKey || event.ctrlKey || event.altKey || event.metaKey;\r\n\r\n  self.promisifyValue = value => {\r\n    value = angular.isUndefined(value) ? true : value;\r\n    return $q[value ? 'when' : 'reject']();\r\n  };\r\n\r\n  self.simplePubSub = function() {\r\n    let events = {};\r\n    return {\r\n      on(names, handler, first) {\r\n        names.split(' ').forEach(name => {\r\n          if (!events[name]) {\r\n            events[name] = [];\r\n          }\r\n          let method = first ? [].unshift : [].push;\r\n          method.call(events[name], handler);\r\n        });\r\n        return this;\r\n      },\r\n      trigger(name, args) {\r\n        let handlers = events[name] || [];\r\n        handlers.every(handler => self.handleUndefinedResult(handler, true)(args));\r\n        return this;\r\n      }\r\n    };\r\n  };\r\n\r\n  return self;\r\n}\r\n","/*@ngInject*/\nexport default function TemplateCacheRegister($templateCache) {\n  'use strict';\r\n\r\n  $templateCache.put('ngTagsInput/auto-complete-match.html',\r\n    \"<span ng-bind-html=\\\"$highlight($getDisplayText())\\\"></span>\"\r\n  );\r\n\r\n\r\n  $templateCache.put('ngTagsInput/auto-complete.html',\r\n    \"<div class=\\\"autocomplete\\\" ng-if=\\\"suggestionList.visible\\\"><ul class=\\\"suggestion-list\\\"><li class=\\\"suggestion-item\\\" ng-repeat=\\\"item in suggestionList.items track by track(item)\\\" ng-class=\\\"getSuggestionClass(item, $index)\\\" ng-click=\\\"addSuggestionByIndex($index)\\\" ng-mouseenter=\\\"suggestionList.select($index)\\\"><ti-autocomplete-match scope=\\\"templateScope\\\" data=\\\"::item\\\"></ti-autocomplete-match></li></ul></div>\"\r\n  );\r\n\r\n\r\n  $templateCache.put('ngTagsInput/tag-item.html',\r\n    \"<span ng-bind=\\\"$getDisplayText()\\\"></span> <a class=\\\"remove-button\\\" ng-click=\\\"$removeTag()\\\" ng-bind=\\\"::$$removeTagSymbol\\\"></a>\"\r\n  );\r\n\r\n\r\n  $templateCache.put('ngTagsInput/tags-input.html',\r\n    \"<div class=\\\"host\\\" tabindex=\\\"-1\\\" ng-click=\\\"eventHandlers.host.click()\\\" ti-transclude-append><div class=\\\"tags\\\" ng-class=\\\"{focused: hasFocus}\\\"><ul class=\\\"tag-list\\\"><li class=\\\"tag-item\\\" ng-repeat=\\\"tag in tagList.items track by track(tag)\\\" ng-class=\\\"getTagClass(tag, $index)\\\" ng-click=\\\"eventHandlers.tag.click(tag)\\\"><ti-tag-item scope=\\\"templateScope\\\" data=\\\"::tag\\\"></ti-tag-item></li></ul><input class=\\\"input\\\" autocomplete=\\\"off\\\" ng-model=\\\"newTag.text\\\" ng-model-options=\\\"{getterSetter: true}\\\" ng-keydown=\\\"eventHandlers.input.keydown($event)\\\" ng-focus=\\\"eventHandlers.input.focus($event)\\\" ng-blur=\\\"eventHandlers.input.blur($event)\\\" ng-paste=\\\"eventHandlers.input.paste($event)\\\" ng-trim=\\\"false\\\" ng-class=\\\"{'invalid-tag': newTag.invalid}\\\" ng-disabled=\\\"disabled\\\" ti-bind-attrs=\\\"{type: options.type, placeholder: options.placeholder, tabindex: options.tabindex, spellcheck: options.spellcheck, name: options.inputName}\\\" ti-autosize></div></div>\"\r\n  );\r\n}","import * as angular from 'angular';\r\nimport Constants from './constants';\r\nimport TagsInputDirective from './tags-input';\r\nimport TagItemDirective from './tag-item';\r\nimport AutocompleteDirective from './auto-complete';\r\nimport AutocompleteMatchDirective from './auto-complete-match';\r\nimport AutosizeDirective from './autosize';\r\nimport BindAttributesDirective from './bind-attrs';\r\nimport TranscludeAppendDirective from './transclude-append';\r\nimport TagsInputConfigurationProvider from './configuration';\r\nimport UtilService from './util';\r\nimport TemplateCacheRegister from 'compiled-templates';\r\n\r\nangular.module('ngTagsInput', [])\r\n    .directive('tagsInput', TagsInputDirective)\r\n    .directive('tiTagItem', TagItemDirective)\r\n    .directive('autoComplete', AutocompleteDirective)\r\n    .directive('tiAutocompleteMatch', AutocompleteMatchDirective)\r\n    .directive('tiAutosize', AutosizeDirective)\r\n    .directive('tiBindAttrs', BindAttributesDirective)\r\n    .directive('tiTranscludeAppend', TranscludeAppendDirective)\r\n    .factory('tiUtil', UtilService)\r\n    .constant('tiConstants', Constants)\r\n    .provider('tagsInputConfig', TagsInputConfigurationProvider)\r\n    .run(TemplateCacheRegister);"],"names":["TagsInputDirective","$timeout","$document","$window","$q","tagsInputConfig","tiUtil","tiConstants","TagList","options","events","onTagAdding","onTagRemoving","self","getTagText","safeToString","tag","displayProperty","setTagText","text","canAddTag","tagText","valid","length","minLength","maxLength","allowedTagsPattern","test","findInObjectArray","items","keyProperty","when","$tag","then","promisifyValue","canRemoveTag","addText","add","replaceSpacesWithDashes","push","trigger","catch","remove","index","splice","clearSelection","select","selected","selectPrior","selectNext","removeSelected","getItems","useStrings","map","validateType","type","SUPPORTED_INPUT_TYPES","indexOf","$scope","$element","$attrs","simplePubSub","load","String","Number","fromCharCode","Boolean","MAX_SAFE_INTEGER","RegExp","tagList","handleUndefinedResult","registerAutocomplete","newTag","templateScope","name","handler","on","registerTagItem","disabled","scope","element","attrs","ngModelCtrl","hotkeys","KEYS","enter","comma","space","backspace","delete","left","right","input","find","validationOptions","setElementValidity","$setValidity","maxTags","minTags","hasFocus","allowLeftoverText","focusInput","focus","$isEmpty","value","angular","isDefined","track","getTagClass","tagClass","$index","$selected","$watch","makeObjectArray","tags","$validate","$observe","eventHandlers","$event","activeElement","prop","lostFocusToBrowserWindow","lostFocusToChildElement","contains","getTextData","clipboardData","originalEvent","getData","onTagAdded","onInvalidTag","onTagRemoved","onTagClicked","$setDirty","invalid","e","triggerHandler","addOnBlur","addFromAutocompleteOnly","key","event","keyCode","isModifierOn","addKeys","addOnEnter","addOnComma","addOnSpace","shouldAdd","shouldRemove","shouldEditLastTag","enableEditingLastTag","shouldSelect","preventDefault","addOnPaste","data","split","pasteSplitPattern","forEach","TagItemDirective","tagsInputCtrl","tagsInput","getOptions","$$template","template","$$removeTagSymbol","removeTagSymbol","$getDisplayText","$removeTag","removeTag","AutocompleteDirective","$sce","SuggestionList","loadFn","lastPromise","getTagId","getDifference","array1","array2","filter","item","a","b","defaultComparer","reset","visible","query","show","selectFirstMatch","debounce","promise","$query","slice","maxResultsToShow","debounceDelay","scrollToElement","root","eq","parent","elementTop","elementHeight","parentHeight","parentScrollTop","suggestionList","source","registerAutocompleteMatch","tab","escape","up","down","shouldLoadSuggestions","loadOnEmpty","getTemplateScope","addSuggestionByIndex","addSuggestion","added","addTag","copy","getSuggestionClass","matchClass","$match","getTags","getCurrentTagText","loadOnFocus","handled","loadOnDownArrow","stopImmediatePropagation","AutocompleteMatchDirective","autoCompleteCtrl","autoComplete","$parent","$highlight","highlightMatchedText","safeHighlight","getQuery","trustAsHtml","AutosizeDirective","ctrl","threshold","getTextAutosizeThreshold","span","css","append","resize","originalValue","width","isString","placeholder","$parsers","unshift","$formatters","$modelValue","BindAttributesDirective","tiBindAttrs","$set","TranscludeAppendDirective","transcludeFn","clone","TagsInputConfigurationProvider","globalDefaults","interpolationStatus","autosizeThreshold","setDefaults","directive","defaults","setActiveInterpolation","setTextAutosizeThreshold","$get","converters","toString","parseInt","toLowerCase","optionDefinitions","defaultValidator","localDefault","validator","converter","getDefault","globalValue","updateValue","newValue","$interpolate","UtilService","fn","delay","timeoutId","args","cancel","apply","array","isArray","isObject","obj","comparer","some","str","encodeHTML","escapeRegexChars","replace","expression","match","isUndefined","trim","valueIfUndefined","result","arguments","shiftKey","ctrlKey","altKey","metaKey","names","first","method","call","handlers","every","TemplateCacheRegister","$templateCache","put","factory","constant","Constants","provider","run"],"mappings":"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"}